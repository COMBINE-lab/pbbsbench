#!/usr/bin/python
#
# run all tests
#

import os
import sys

os.system("echo HOSTNAME: `hostname`")

tests = [
 ["integerSort/parallelRadixSort",True],
# ["integerSort/serialRadixSort",False],

 ["comparisonSort/sampleSort",True],
 ["comparisonSort/quickSort",True],
 ["comparisonSort/mergeSort",True],
 ["comparisonSort/stableSampleSort",True],
 ["comparisonSort/serialSort",False],
 ["comparisonSort/stlParallelSort",True],
 ["comparisonSort/ips4o",True],

#["suffixArray/serialKS",False],  
 ["suffixArray/parallelKS",True],
 ["suffixArray/parallelRange",True],
 ["suffixArray/serialDivsufsort",False],  

 ["wordCounts/histogram",True],
 ["wordCounts/histogramStar",True],
 ["wordCounts/serial",False],

 ["removeDuplicates/parlayhash", True],

 ["BWDecode/listRank",True],

 ["histogram/parallel",True],

 ["index/parallel", True],

 ["longestRepeatedSubstring/doubling",True],

 ["classify/decisionTree", True],

 ["minSpanningForest/parallelKruskal",True],
 ["minSpanningForest/parallelFilterKruskal",True],
 ["minSpanningForest/serialMST",False],

 ["spanningForest/incrementalST",True],
 ["spanningForest/ndST",True], 
 ["spanningForest/serialST",False],

 ["breadthFirstSearch/simpleBFS",True],
 ["breadthFirstSearch/backForwardBFS",True],
 ["breadthFirstSearch/deterministicBFS",True],
 ["breadthFirstSearch/serialBFS",False],

#["maximalMatching/serialMatching",False],
#["maximalMatching/ndMatching",True],
 ["maximalMatching/incrementalMatching",True],

 ["maximalIndependentSet/ndMIS",True],
 ["maximalIndependentSet/incrementalMIS",True],
 ["maximalIndependentSet/serialMIS",False],

 ["nearestNeighbors/octTree",True],

 ["rayCast/kdTree",True],

 ["convexHull/quickHull",True],
 ["convexHull/serialHull",False],

#["delaunayTriangulation/serialDelaunay",False],
 ["delaunayTriangulation/incrementalDelaunay",True],

 ["delaunayRefine/incrementalRefine",True],

 ["rangeQuery2d/parallelPlaneSweep",True],

 ["nBody/parallelCK",True],


#["setCover/manis",True],
#["setCover/serialDFG",False],

#["spmv/pSPMV",True],
#["spmv/sSPMV",False],

# ["nearestNeighbor/callahanKosaraju",True],

# ["lassoRegression/parallelShootingLasso",True],
#["lassoRegression/parallelShootingLasso2",True]
]

noTime = False
noCheck = False
scale = False
forceCompile = False
parOnly = False
useNumactl = True
if (sys.argv.count("-only") > 0):
    filteredTests = [l for l in tests if sys.argv.count(l[0]) > 0]
    tests = filteredTests
    print("Running only: ", tests)
if (sys.argv.count("-from") > 0):
    idx = [i for i in range(len(tests)) if sys.argv.count(tests[i][0]) > 0]
    if len(idx) > 0 :
        tests = tests[idx[0]:len(tests)]
        print("Running from: ", tests[0])
if (sys.argv.count("-notime") > 0):
    print("Not Timing")
    noTime = True
if (sys.argv.count("-nocheck") > 0):
    print("Not Checking")
    noCheck = True
if (sys.argv.count("-par") > 0):
    print("Parallel only")
    parOnly = True
if (sys.argv.count("-scale") > 0):
    print("Scale tests")
    scale = True
if (sys.argv.count("-nonuma") > 0):
    print("No numactl")
    useNumactl = False
if (sys.argv.count("-force") > 0):
    print("Forcing Compile")
    forceCompile = True
if (sys.argv.count("-h") > 0 or sys.argv.count("-help")):
    print("arguments:")
    print(" -force   : forces compile")
    print(" -nonuma  : do not use numactl -i all")
    print(" -scale   : run on a range of number of cores")
    print(" -par     : only run parallel benchmarks")
    print(" -notime  : only compile")
    print(" -nocheck : do not check results")
    print(" -only <bnchmrk> : only run given benchmark")
    print(" -from <bnchmrk> : only run from given benchmark")
    forceCompile = True
    exit()
    
def detectCPUs():
    """                                                                                                                                                  
     Detects the number of CPUs on a system. Cribbed from pp.                                                                                            
     """
    # Linux, Unix and MacOS:                                                                                                                             
    if hasattr(os, "sysconf"):
       if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
           # Linux & Unix:                                                                                                                               
           ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
           if isinstance(ncpus, int) and ncpus > 0:
               return ncpus
       else: # OSX:                                                                                                                                      
           return int(os.popen2("sysctl -n hw.ncpu")[1].read())
    # Windows:                                                                                                                                           
    if os.environ.has_key("NUMBER_OF_PROCESSORS"):
           ncpus = int(os.environ["NUMBER_OF_PROCESSORS"]);
           if ncpus > 0:
               return ncpus
    return 1 # Default   

maxcpus = detectCPUs()

def getProcessors() :
    if maxcpus <= 16:
        processors = [1]+range(2,maxcpus+1,2)
    elif maxcpus <= 32:
        processors = [1,2]+range(4,maxcpus+1,4)
    elif maxcpus <= 40:
        processors = [1,4,16,20,40]
    elif maxcpus <= 64:
        processors = [1,2,4]+range(8,maxcpus+1,8)
    elif maxcpus == 144:
        processors = [1,4,16,32,72,144]
    elif maxcpus == 256:
        processors = [1,4,16,32,64,128,256]
    else:
        processors = [1,2,4,8]+range(16,maxcpus+1,16)
    print(processors)
    return processors

def compiletest(dir) :
    if (forceCompile) :
        ss = "cd " + dir + " ; make -s cleanall ; make -s"
    else :
        ss = "cd " + dir + " ; make -s"
    os.system("echo")
    os.system("echo \"" + ss + "\"")
    os.system(ss)
    
def runtest(test,procs,check) :
    if (procs==1) : rounds = 1
    elif (procs < 16) : rounds = 3
    elif (procs < 64) : rounds = 5
    else : rounds = 7
    dir = test[0]
    numactl = useNumactl and (procs > 1)
    options = "-r " + `rounds`
    if (procs > 0) :
        options =  options + " -p " + `procs`
    if not(check):
        options = options + " -x"
    if numactl:
        sc = "cd " + dir + " ; numactl -i all ./testInputs " + options
    else:
        sc = "cd " + dir + " ; ./testInputs " + options
    os.system("echo \"" + sc + "\"")
    x = os.system(sc)
    if (x) :  
        raise NameError("  " + sc)

try :
    if scale : processors = getProcessors()
    else : os.system("echo " + "\"running on " + `maxcpus` + " threads\"")
    for test in tests :
        isParallel = test[1]
        if (isParallel or not(parOnly)) :
            compiletest(test[0])
            if not(noTime) : 
                if (not(isParallel)) :
                    runtest(test, 1, not(noCheck))
                elif (not(scale)) :
                    runtest(test, maxcpus, not(noCheck)) 
                else :
                    n = len(processors)
                    for p in processors[0:n-1] :
                        runtest(test, p, False)
                        os.system("echo")
                    runtest(test, processors[n-1], not(noCheck))

except NameError,v :
  x, = v
  print "TEST TERMINATED ABNORMALLY:\n"+x
