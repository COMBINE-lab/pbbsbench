#!/usr/bin/python
#
# run all tests
#

import os
import sys

os.system("echo HOSTNAME: `hostname`")

tests = [
 ["integerSort/parallelRadixSort",True],
# ["integerSort/serialRadixSort",False],

# ["comparisonSort/ips4o",True],
 ["comparisonSort/sampleSort",True],
 ["comparisonSort/quickSort",True],
 ["comparisonSort/mergeSort",True],
# ["comparisonSort/stableSampleSort",True],
 ["comparisonSort/serialSort",False],
 ["comparisonSort/stlParallelSort",False],

#["suffixArray/serialKS",False],  
 ["suffixArray/parallelKS",True],
 ["suffixArray/parallelRange",True],
 ["suffixArray/serialDivsufsort",False],  

 ["wordCounts/histogram",True],
 ["wordCounts/histogramStar",True],
 ["wordCounts/serial",False],

 ["minSpanningForest/parallelKruskal",True],
 ["minSpanningForest/parallelFilterKruskal",True],
 ["minSpanningForest/serialMST",False],

 ["spanningForest/incrementalST",True],
 ["spanningForest/ndST",True], 
 ["spanningForest/serialST",False],

 ["breadthFirstSearch/ndBFS",True],
 ["breadthFirstSearch/deterministicBFS",True],
 ["breadthFirstSearch/serialBFS",False],

#["maximalMatching/serialMatching",False],
#["maximalMatching/ndMatching",True],
 ["maximalMatching/incrementalMatching",True],

 ["maximalIndependentSet/ndMIS",True],
 ["maximalIndependentSet/incrementalMIS",True],
 ["maximalIndependentSet/serialMIS",False],

 ["nearestNeighbors/octTree",True],

 ["rayCast/kdTree",True],

 ["convexHull/quickHull",True],
 ["convexHull/serialHull",False],

#["delaunayTriangulation/serialDelaunay",False],
 ["delaunayTriangulation/incrementalDelaunay",True],

 ["delaunayRefine/incrementalRefine",True],

 ["nBody/parallelCK",True],


#["setCover/manis",True],
#["setCover/serialDFG",False],

#["spmv/pSPMV",True],
#["spmv/sSPMV",False],

# ["nearestNeighbor/callahanKosaraju",True],

# ["lassoRegression/parallelShootingLasso",True],
#["lassoRegression/parallelShootingLasso2",True]
]


compileOnly = False
testOnly = False
if (sys.argv.count("-only") > 0):
    filteredTests = [l for l in tests if sys.argv.count(l[0]) > 0]
    tests = filteredTests
    print("Running only: ", tests)
if (sys.argv.count("-from") > 0):
    idx = [i for i in range(len(tests)) if sys.argv.count(tests[i][0]) > 0]
    if len(idx) > 0 :
        tests = tests[idx[0]:len(tests)]
        print("Running from: ", tests[0])
if (sys.argv.count("-c") > 0):
    print("Compiling only")
    compileOnly = True
if (sys.argv.count("-t") > 0):
    print("Testing only")
    testOnly = True
    
def detectCPUs():
    """                                                                                                                                                  
     Detects the number of CPUs on a system. Cribbed from pp.                                                                                            
     """
    # Linux, Unix and MacOS:                                                                                                                             
    if hasattr(os, "sysconf"):
       if os.sysconf_names.has_key("SC_NPROCESSORS_ONLN"):
           # Linux & Unix:                                                                                                                               
           ncpus = os.sysconf("SC_NPROCESSORS_ONLN")
           if isinstance(ncpus, int) and ncpus > 0:
               return ncpus
       else: # OSX:                                                                                                                                      
           return int(os.popen2("sysctl -n hw.ncpu")[1].read())
    # Windows:                                                                                                                                           
    if os.environ.has_key("NUMBER_OF_PROCESSORS"):
           ncpus = int(os.environ["NUMBER_OF_PROCESSORS"]);
           if ncpus > 0:
               return ncpus
    return 1 # Default   



maxcpus = detectCPUs()
if compileOnly or testOnly:
    processors=[]
elif maxcpus <= 16:
    processors = [1]+range(2,maxcpus+1,2)
elif maxcpus <= 32:
    processors = [1,2]+range(4,maxcpus+1,4)
elif maxcpus <= 40:
    processors = [1,4,16,20,40]
elif maxcpus <= 64:
    processors = [1,2,4]+range(8,maxcpus+1,8)
elif maxcpus == 144:
    processors = [1,4,16,32,72,144]
elif maxcpus == 256:
    processors = [1,4,16,32,64,128,256]
else:
    processors = [1,2,4,8]+range(16,maxcpus+1,16)
print(processors)

def compiletest(dir) :
  ss = "cd " + dir + " ; make -s cleanall ; make -s"
  os.system("echo " + "compiling: " + dir)
  os.system(ss)
    
def runtest(dir,options,numactl) :
  if numactl:
      sc = "cd " + dir + " ; numactl -i all ./testInputs " + options
  else:
      sc = "cd " + dir + " ; ./testInputs " + options
  os.system("echo")
  os.system("echo " + dir)
  x = os.system(sc)
  if (x) :  
      raise NameError("  " + sc)

usenumactl = True

try :
  for test in tests :
      compiletest(test[0])
      if (not(compileOnly)) :
          if (test[1]) :
              for p in processors :
                  if (p == 1) :
                      runtest(test[0], "-x -r 1 -p " + `p`, False)
                  elif (p < 16) :
                      runtest(test[0], "-x -r 3 -p " + `p`, usenumactl)
                  elif (p < 64) :
                      runtest(test[0], "-x -r 5 -p " + `p`, usenumactl)
                  else :
                      runtest(test[0], "-x -r 7 -p " + `p`, usenumactl)
              runtest(test[0],"-r 1", usenumactl)
          else :
              runtest(test[0], "-r 1 -p 1", False)
except NameError,v :
  x, = v
  print "TEST TERMINATED ABNORMALLY:\n"+x



